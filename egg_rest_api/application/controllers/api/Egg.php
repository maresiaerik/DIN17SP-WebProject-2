<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Egg extends REST_Controller 
{
    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['eggs_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['eggs_post']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['eggs_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->load->model('Egg_model');
    }

    public function eggs_get()
    {
        // Eggs from a data store e.g. database
        $eggs = $this->Egg_model->get_eggs();

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($eggs)
            {
                // Set the response and exit
                $this->response($eggs, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $egg = NULL;

        if (!empty($eggs))
        {
            //Get the user from database
            $egg=$this->Egg_model->get_egg($id);
        }

        if (!empty($egg))
        {
            $this->set_response($egg, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'Egg could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function eggs_put()
    {
        // update the user
        $id=$this->put('id');

        $update_data=array(
            'type' => $this->put('type'),
            'vector_x' => $this->put('vector_x'),
            'vector_y' => $this->put('vector_y'),
            'collect_time' => $this->put('collect_time')
        );

        $this->Egg_model->update_egg($id, $update_data);

        $message = [
            'id' => $this->put('id'), // Automatically generated by the model
            'type' => $this->put('type'),
            'vector_x' => $this->put('vector_x'),
            'vector_y' => $this->put('vector_y'),
            'collect_time' => $this->put('collect_time'),
            'message' => 'Updated a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
}